name: CI/CD Pipeline

on:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n  release:\n    types: [ published ]\n\njobs:\n  test:\n    name: Test Application\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.8\", \"3.9\", \"3.10\", \"3.11\"]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Cache pip dependencies\n      uses: actions/cache@v3\n      with:\n        path: ~/.cache/pip\n        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n        restore-keys: |\n          ${{ runner.os }}-pip-\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install pytest pytest-cov flake8 black isort\n\n    - name: Lint with flake8\n      run: |\n        # Stop the build if there are Python syntax errors or undefined names\n        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n        # Treat all errors as warnings. GitHub editor is 127 chars wide\n        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n\n    - name: Check code formatting with black\n      run: |\n        black --check --diff .\n\n    - name: Check import sorting with isort\n      run: |\n        isort --check-only --diff .\n\n    - name: Test import and basic functionality\n      run: |\n        python -c \"import streamlit; print('Streamlit import successful')\"\n        python -c \"import app; print('App import successful')\"\n        python -c \"from app import validate_youtube_url, extract_video_id; print('Function imports successful')\"\n\n    - name: Test URL validation\n      run: |\n        python -c \"\n        from app import validate_youtube_url, extract_video_id\n        test_urls = [\n          'https://www.youtube.com/watch?v=dQw4w9WgXcQ',\n          'https://youtu.be/dQw4w9WgXcQ',\n          'https://www.youtube.com/embed/dQw4w9WgXcQ'\n        ]\n        for url in test_urls:\n          assert validate_youtube_url(url), f'URL validation failed for {url}'\n          assert extract_video_id(url) == 'dQw4w9WgXcQ', f'Video ID extraction failed for {url}'\n        print('All URL tests passed!')\n        \"\n\n  security:\n    name: Security Scan\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: \"3.10\"\n\n    - name: Install bandit\n      run: |\n        python -m pip install --upgrade pip\n        pip install bandit[toml]\n\n    - name: Run bandit security scan\n      run: |\n        bandit -r . -f json -o bandit-report.json || true\n        bandit -r . || true\n\n    - name: Upload bandit report\n      uses: actions/upload-artifact@v3\n      if: always()\n      with:\n        name: bandit-report\n        path: bandit-report.json\n\n  dependency-check:\n    name: Dependency Vulnerability Check\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: \"3.10\"\n\n    - name: Install safety\n      run: |\n        python -m pip install --upgrade pip\n        pip install safety\n\n    - name: Check dependencies for vulnerabilities\n      run: |\n        pip install -r requirements.txt\n        safety check || true\n\n  code-quality:\n    name: Code Quality Analysis\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: \"3.10\"\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install pylint mypy\n\n    - name: Run pylint\n      run: |\n        pylint app.py --exit-zero --output-format=json > pylint-report.json || true\n        pylint app.py --exit-zero\n\n    - name: Run mypy type checking\n      run: |\n        mypy app.py --ignore-missing-imports || true\n\n    - name: Upload pylint report\n      uses: actions/upload-artifact@v3\n      if: always()\n      with:\n        name: pylint-report\n        path: pylint-report.json\n\n  build-check:\n    name: Build Check\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python-version: [\"3.8\", \"3.11\"]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Test application startup (Linux/Mac)\n      if: runner.os != 'Windows'\n      run: |\n        timeout 30s streamlit run app.py --server.headless true --server.port 8501 || echo \"App startup test completed\"\n\n    - name: Test application startup (Windows)\n      if: runner.os == 'Windows'\n      run: |\n        Start-Process -FilePath \"python\" -ArgumentList \"-m streamlit run app.py --server.headless true --server.port 8501\" -PassThru\n        Start-Sleep -Seconds 10\n        Write-Host \"App startup test completed\"\n      shell: powershell\n\n  documentation:\n    name: Documentation Check\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Check README exists and is not empty\n      run: |\n        if [ ! -f README.md ]; then\n          echo \"README.md not found!\"\n          exit 1\n        fi\n        if [ ! -s README.md ]; then\n          echo \"README.md is empty!\"\n          exit 1\n        fi\n        echo \"README.md check passed\"\n\n    - name: Check LICENSE exists\n      run: |\n        if [ ! -f LICENSE ]; then\n          echo \"LICENSE file not found!\"\n          exit 1\n        fi\n        echo \"LICENSE check passed\"\n\n    - name: Check CONTRIBUTING.md exists\n      run: |\n        if [ ! -f CONTRIBUTING.md ]; then\n          echo \"CONTRIBUTING.md not found!\"\n          exit 1\n        fi\n        echo \"CONTRIBUTING.md check passed\"\n\n    - name: Validate requirements.txt\n      run: |\n        if [ ! -f requirements.txt ]; then\n          echo \"requirements.txt not found!\"\n          exit 1\n        fi\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt --dry-run\n        echo \"requirements.txt validation passed\"\n\n  notify:\n    name: Notification\n    runs-on: ubuntu-latest\n    needs: [test, security, dependency-check, code-quality, build-check, documentation]\n    if: always()\n    steps:\n    - name: Notify on success\n      if: ${{ needs.test.result == 'success' && needs.build-check.result == 'success' }}\n      run: echo \"✅ All CI checks passed successfully!\"\n\n    - name: Notify on failure\n      if: ${{ needs.test.result == 'failure' || needs.build-check.result == 'failure' }}\n      run: |\n        echo \"❌ CI checks failed!\"\n        echo \"Test result: ${{ needs.test.result }}\"\n        echo \"Build check result: ${{ needs.build-check.result }}\"\n        exit 1